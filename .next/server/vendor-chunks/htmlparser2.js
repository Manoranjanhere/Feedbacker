"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/htmlparser2";
exports.ids = ["vendor-chunks/htmlparser2"];
exports.modules = {

/***/ "(rsc)/./node_modules/htmlparser2/lib/Parser.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Parser.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Parser = void 0;\nvar Tokenizer_js_1 = __importStar(__webpack_require__(/*! ./Tokenizer.js */ \"(rsc)/./node_modules/htmlparser2/lib/Tokenizer.js\"));\nvar decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(rsc)/./node_modules/entities/lib/decode.js\");\nvar formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\"\n]);\nvar pTag = new Set([\n    \"p\"\n]);\nvar tableSectionTags = new Set([\n    \"thead\",\n    \"tbody\"\n]);\nvar ddtTags = new Set([\n    \"dd\",\n    \"dt\"\n]);\nvar rtpTags = new Set([\n    \"rt\",\n    \"rp\"\n]);\nvar openImpliesClose = new Map([\n    [\n        \"tr\",\n        new Set([\n            \"tr\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"th\",\n        new Set([\n            \"th\"\n        ])\n    ],\n    [\n        \"td\",\n        new Set([\n            \"thead\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"body\",\n        new Set([\n            \"head\",\n            \"link\",\n            \"script\"\n        ])\n    ],\n    [\n        \"li\",\n        new Set([\n            \"li\"\n        ])\n    ],\n    [\n        \"p\",\n        pTag\n    ],\n    [\n        \"h1\",\n        pTag\n    ],\n    [\n        \"h2\",\n        pTag\n    ],\n    [\n        \"h3\",\n        pTag\n    ],\n    [\n        \"h4\",\n        pTag\n    ],\n    [\n        \"h5\",\n        pTag\n    ],\n    [\n        \"h6\",\n        pTag\n    ],\n    [\n        \"select\",\n        formTags\n    ],\n    [\n        \"input\",\n        formTags\n    ],\n    [\n        \"output\",\n        formTags\n    ],\n    [\n        \"button\",\n        formTags\n    ],\n    [\n        \"datalist\",\n        formTags\n    ],\n    [\n        \"textarea\",\n        formTags\n    ],\n    [\n        \"option\",\n        new Set([\n            \"option\"\n        ])\n    ],\n    [\n        \"optgroup\",\n        new Set([\n            \"optgroup\",\n            \"option\"\n        ])\n    ],\n    [\n        \"dd\",\n        ddtTags\n    ],\n    [\n        \"dt\",\n        ddtTags\n    ],\n    [\n        \"address\",\n        pTag\n    ],\n    [\n        \"article\",\n        pTag\n    ],\n    [\n        \"aside\",\n        pTag\n    ],\n    [\n        \"blockquote\",\n        pTag\n    ],\n    [\n        \"details\",\n        pTag\n    ],\n    [\n        \"div\",\n        pTag\n    ],\n    [\n        \"dl\",\n        pTag\n    ],\n    [\n        \"fieldset\",\n        pTag\n    ],\n    [\n        \"figcaption\",\n        pTag\n    ],\n    [\n        \"figure\",\n        pTag\n    ],\n    [\n        \"footer\",\n        pTag\n    ],\n    [\n        \"form\",\n        pTag\n    ],\n    [\n        \"header\",\n        pTag\n    ],\n    [\n        \"hr\",\n        pTag\n    ],\n    [\n        \"main\",\n        pTag\n    ],\n    [\n        \"nav\",\n        pTag\n    ],\n    [\n        \"ol\",\n        pTag\n    ],\n    [\n        \"pre\",\n        pTag\n    ],\n    [\n        \"section\",\n        pTag\n    ],\n    [\n        \"table\",\n        pTag\n    ],\n    [\n        \"ul\",\n        pTag\n    ],\n    [\n        \"rt\",\n        rtpTags\n    ],\n    [\n        \"rp\",\n        rtpTags\n    ],\n    [\n        \"tbody\",\n        tableSectionTags\n    ],\n    [\n        \"tfoot\",\n        tableSectionTags\n    ]\n]);\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\nvar foreignContextElements = new Set([\n    \"math\",\n    \"svg\"\n]);\nvar htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignobject\",\n    \"desc\",\n    \"title\"\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ function() {\n    function Parser(cbs, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _a, _b, _c, _d, _e;\n        this.options = options;\n        /** The start index of the last event. */ this.startIndex = 0;\n        /** The end index of the last event. */ this.endIndex = 0;\n        /**\n         * Store the start index of the current open tag,\n         * so we can update the start index for attributes.\n         */ this.openTagStart = 0;\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.buffers = [];\n        this.bufferOffset = 0;\n        /** The index of the last written buffer. Used when resuming after a `pause()`. */ this.writeIndex = 0;\n        /** Indicates whether the parser has finished running / `.end` has been called. */ this.ended = false;\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    // Tokenizer event handlers\n    /** @internal */ Parser.prototype.ontext = function(start, endIndex) {\n        var _a, _b;\n        var data = this.getSlice(start, endIndex);\n        this.endIndex = endIndex - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n        this.startIndex = endIndex;\n    };\n    /** @internal */ Parser.prototype.ontextentity = function(cp) {\n        var _a, _b;\n        /*\n         * Entities can be emitted on the character, or directly after.\n         * We use the section start here to get accurate indices.\n         */ var index = this.tokenizer.getSectionStart();\n        this.endIndex = index - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));\n        this.startIndex = index;\n    };\n    Parser.prototype.isVoidElement = function(name) {\n        return !this.options.xmlMode && voidElements.has(name);\n    };\n    /** @internal */ Parser.prototype.onopentagname = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.emitOpenTag(name);\n    };\n    Parser.prototype.emitOpenTag = function(name) {\n        var _a, _b, _c, _d;\n        this.openTagStart = this.startIndex;\n        this.tagname = name;\n        var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);\n        if (impliesClose) {\n            while(this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])){\n                var element = this.stack.pop();\n                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);\n            }\n        }\n        if (!this.isVoidElement(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            } else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);\n        if (this.cbs.onopentag) this.attribs = {};\n    };\n    Parser.prototype.endOpenTag = function(isImplied) {\n        var _a, _b;\n        this.startIndex = this.openTagStart;\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);\n            this.attribs = null;\n        }\n        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {\n            this.cbs.onclosetag(this.tagname, true);\n        }\n        this.tagname = \"\";\n    };\n    /** @internal */ Parser.prototype.onopentagend = function(endIndex) {\n        this.endIndex = endIndex;\n        this.endOpenTag(false);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onclosetag = function(start, endIndex) {\n        var _a, _b, _c, _d, _e, _f;\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (!this.isVoidElement(name)) {\n            var pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    var count = this.stack.length - pos;\n                    while(count--){\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop(), count !== 0);\n                    }\n                } else this.stack.length = pos;\n            } else if (!this.options.xmlMode && name === \"p\") {\n                // Implicit open before close\n                this.emitOpenTag(\"p\");\n                this.closeCurrentTag(true);\n            }\n        } else if (!this.options.xmlMode && name === \"br\") {\n            // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.\n            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, \"br\");\n            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, \"br\", {}, true);\n            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, \"br\", false);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onselfclosingtag = function(endIndex) {\n        this.endIndex = endIndex;\n        if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag(false);\n            // Set `startIndex` for next node\n            this.startIndex = endIndex + 1;\n        } else {\n            // Ignore the fact that the tag is self-closing.\n            this.onopentagend(endIndex);\n        }\n    };\n    Parser.prototype.closeCurrentTag = function(isOpenImplied) {\n        var _a, _b;\n        var name = this.tagname;\n        this.endOpenTag(isOpenImplied);\n        // Self-closing tags will be on the top of the stack\n        if (this.stack[this.stack.length - 1] === name) {\n            // If the opening tag isn't implied, the closing tag has to be implied.\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);\n            this.stack.pop();\n        }\n    };\n    /** @internal */ Parser.prototype.onattribname = function(start, endIndex) {\n        this.startIndex = start;\n        var name = this.getSlice(start, endIndex);\n        this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;\n    };\n    /** @internal */ Parser.prototype.onattribdata = function(start, endIndex) {\n        this.attribvalue += this.getSlice(start, endIndex);\n    };\n    /** @internal */ Parser.prototype.onattribentity = function(cp) {\n        this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);\n    };\n    /** @internal */ Parser.prototype.onattribend = function(quote, endIndex) {\n        var _a, _b;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '\"' : quote === Tokenizer_js_1.QuoteType.Single ? \"'\" : quote === Tokenizer_js_1.QuoteType.NoValue ? undefined : null);\n        if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribvalue = \"\";\n    };\n    Parser.prototype.getInstructionName = function(value) {\n        var index = value.search(reNameEnd);\n        var name = index < 0 ? value : value.substr(0, index);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    /** @internal */ Parser.prototype.ondeclaration = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"!\".concat(name), \"!\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onprocessinginstruction = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"?\".concat(name), \"?\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.oncomment = function(start, endIndex, offset) {\n        var _a, _b, _c, _d;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.oncdata = function(start, endIndex, offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex - offset);\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        } else {\n            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, \"[CDATA[\".concat(value, \"]]\"));\n            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onend = function() {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            // Set the end index for all remaining tags\n            this.endIndex = this.startIndex;\n            for(var index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true));\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */ Parser.prototype.reset = function() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribs = null;\n        this.stack.length = 0;\n        this.startIndex = 0;\n        this.endIndex = 0;\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n        this.buffers.length = 0;\n        this.bufferOffset = 0;\n        this.writeIndex = 0;\n        this.ended = false;\n    };\n    /**\n     * Resets the parser, then parses a complete document and\n     * pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */ Parser.prototype.parseComplete = function(data) {\n        this.reset();\n        this.end(data);\n    };\n    Parser.prototype.getSlice = function(start, end) {\n        while(start - this.bufferOffset >= this.buffers[0].length){\n            this.shiftBuffer();\n        }\n        var slice = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);\n        while(end - this.bufferOffset > this.buffers[0].length){\n            this.shiftBuffer();\n            slice += this.buffers[0].slice(0, end - this.bufferOffset);\n        }\n        return slice;\n    };\n    Parser.prototype.shiftBuffer = function() {\n        this.bufferOffset += this.buffers[0].length;\n        this.writeIndex--;\n        this.buffers.shift();\n    };\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */ Parser.prototype.write = function(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".write() after done!\"));\n            return;\n        }\n        this.buffers.push(chunk);\n        if (this.tokenizer.running) {\n            this.tokenizer.write(chunk);\n            this.writeIndex++;\n        }\n    };\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */ Parser.prototype.end = function(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".end() after done!\"));\n            return;\n        }\n        if (chunk) this.write(chunk);\n        this.ended = true;\n        this.tokenizer.end();\n    };\n    /**\n     * Pauses parsing. The parser won't emit events until `resume` is called.\n     */ Parser.prototype.pause = function() {\n        this.tokenizer.pause();\n    };\n    /**\n     * Resumes parsing after `pause` was called.\n     */ Parser.prototype.resume = function() {\n        this.tokenizer.resume();\n        while(this.tokenizer.running && this.writeIndex < this.buffers.length){\n            this.tokenizer.write(this.buffers[this.writeIndex++]);\n        }\n        if (this.ended) this.tokenizer.end();\n    };\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */ Parser.prototype.parseChunk = function(chunk) {\n        this.write(chunk);\n    };\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */ Parser.prototype.done = function(chunk) {\n        this.end(chunk);\n    };\n    return Parser;\n}();\nexports.Parser = Parser; //# sourceMappingURL=Parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1BhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxxQkFBcUIsSUFBSyxJQUFJLElBQUksQ0FBQ0Esa0JBQWtCLElBQU1mLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVjLENBQUM7SUFDekZoQixPQUFPYyxjQUFjLENBQUNaLEdBQUcsV0FBVztRQUFFVSxZQUFZO1FBQU1LLE9BQU9EO0lBQUU7QUFDckUsSUFBSyxTQUFTZCxDQUFDLEVBQUVjLENBQUM7SUFDZGQsQ0FBQyxDQUFDLFVBQVUsR0FBR2M7QUFDbkI7QUFDQSxJQUFJRSxlQUFlLElBQUssSUFBSSxJQUFJLENBQUNBLFlBQVksSUFBSyxTQUFVQyxHQUFHO0lBQzNELElBQUlBLE9BQU9BLElBQUlWLFVBQVUsRUFBRSxPQUFPVTtJQUNsQyxJQUFJQyxTQUFTLENBQUM7SUFDZCxJQUFJRCxPQUFPLE1BQU07UUFBQSxJQUFLLElBQUlmLEtBQUtlLElBQUssSUFBSWYsTUFBTSxhQUFhSixPQUFPcUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osS0FBS2YsSUFBSUwsZ0JBQWdCcUIsUUFBUUQsS0FBS2Y7SUFBRTtJQUN4SVcsbUJBQW1CSyxRQUFRRDtJQUMzQixPQUFPQztBQUNYO0FBQ0FwQiw4Q0FBNkM7SUFBRWlCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RPLGNBQWMsR0FBRyxLQUFLO0FBQ3RCLElBQUlFLGlCQUFpQlIsYUFBYVMsbUJBQU9BLENBQUMseUVBQWdCO0FBQzFELElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLDJFQUF3QjtBQUNsRCxJQUFJRSxXQUFXLElBQUlDLElBQUk7SUFDbkI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELElBQUlDLE9BQU8sSUFBSUQsSUFBSTtJQUFDO0NBQUk7QUFDeEIsSUFBSUUsbUJBQW1CLElBQUlGLElBQUk7SUFBQztJQUFTO0NBQVE7QUFDakQsSUFBSUcsVUFBVSxJQUFJSCxJQUFJO0lBQUM7SUFBTTtDQUFLO0FBQ2xDLElBQUlJLFVBQVUsSUFBSUosSUFBSTtJQUFDO0lBQU07Q0FBSztBQUNsQyxJQUFJSyxtQkFBbUIsSUFBSUMsSUFBSTtJQUMzQjtRQUFDO1FBQU0sSUFBSU4sSUFBSTtZQUFDO1lBQU07WUFBTTtTQUFLO0tBQUU7SUFDbkM7UUFBQztRQUFNLElBQUlBLElBQUk7WUFBQztTQUFLO0tBQUU7SUFDdkI7UUFBQztRQUFNLElBQUlBLElBQUk7WUFBQztZQUFTO1lBQU07U0FBSztLQUFFO0lBQ3RDO1FBQUM7UUFBUSxJQUFJQSxJQUFJO1lBQUM7WUFBUTtZQUFRO1NBQVM7S0FBRTtJQUM3QztRQUFDO1FBQU0sSUFBSUEsSUFBSTtZQUFDO1NBQUs7S0FBRTtJQUN2QjtRQUFDO1FBQUtDO0tBQUs7SUFDWDtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQVVGO0tBQVM7SUFDcEI7UUFBQztRQUFTQTtLQUFTO0lBQ25CO1FBQUM7UUFBVUE7S0FBUztJQUNwQjtRQUFDO1FBQVVBO0tBQVM7SUFDcEI7UUFBQztRQUFZQTtLQUFTO0lBQ3RCO1FBQUM7UUFBWUE7S0FBUztJQUN0QjtRQUFDO1FBQVUsSUFBSUMsSUFBSTtZQUFDO1NBQVM7S0FBRTtJQUMvQjtRQUFDO1FBQVksSUFBSUEsSUFBSTtZQUFDO1lBQVk7U0FBUztLQUFFO0lBQzdDO1FBQUM7UUFBTUc7S0FBUTtJQUNmO1FBQUM7UUFBTUE7S0FBUTtJQUNmO1FBQUM7UUFBV0Y7S0FBSztJQUNqQjtRQUFDO1FBQVdBO0tBQUs7SUFDakI7UUFBQztRQUFTQTtLQUFLO0lBQ2Y7UUFBQztRQUFjQTtLQUFLO0lBQ3BCO1FBQUM7UUFBV0E7S0FBSztJQUNqQjtRQUFDO1FBQU9BO0tBQUs7SUFDYjtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQVlBO0tBQUs7SUFDbEI7UUFBQztRQUFjQTtLQUFLO0lBQ3BCO1FBQUM7UUFBVUE7S0FBSztJQUNoQjtRQUFDO1FBQVVBO0tBQUs7SUFDaEI7UUFBQztRQUFRQTtLQUFLO0lBQ2Q7UUFBQztRQUFVQTtLQUFLO0lBQ2hCO1FBQUM7UUFBTUE7S0FBSztJQUNaO1FBQUM7UUFBUUE7S0FBSztJQUNkO1FBQUM7UUFBT0E7S0FBSztJQUNiO1FBQUM7UUFBTUE7S0FBSztJQUNaO1FBQUM7UUFBT0E7S0FBSztJQUNiO1FBQUM7UUFBV0E7S0FBSztJQUNqQjtRQUFDO1FBQVNBO0tBQUs7SUFDZjtRQUFDO1FBQU1BO0tBQUs7SUFDWjtRQUFDO1FBQU1HO0tBQVE7SUFDZjtRQUFDO1FBQU1BO0tBQVE7SUFDZjtRQUFDO1FBQVNGO0tBQWlCO0lBQzNCO1FBQUM7UUFBU0E7S0FBaUI7Q0FDOUI7QUFDRCxJQUFJSyxlQUFlLElBQUlQLElBQUk7SUFDdkI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELElBQUlRLHlCQUF5QixJQUFJUixJQUFJO0lBQUM7SUFBUTtDQUFNO0FBQ3BELElBQUlTLDBCQUEwQixJQUFJVCxJQUFJO0lBQ2xDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsSUFBSVUsWUFBWTtBQUNoQixJQUFJZixTQUFTLFdBQVcsR0FBSTtJQUN4QixTQUFTQSxPQUFPZ0IsR0FBRyxFQUFFQyxPQUFPO1FBQ3hCLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVUsQ0FBQztRQUFHO1FBQ3hDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDO1FBQ3BCLElBQUksQ0FBQ0wsT0FBTyxHQUFHQTtRQUNmLHVDQUF1QyxHQUN2QyxJQUFJLENBQUNNLFVBQVUsR0FBRztRQUNsQixxQ0FBcUMsR0FDckMsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEI7OztTQUdDLEdBQ0QsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsS0FBSyxHQUFHLEVBQUU7UUFDZixJQUFJLENBQUNDLGNBQWMsR0FBRyxFQUFFO1FBQ3hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsZ0ZBQWdGLEdBQ2hGLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLGdGQUFnRixHQUNoRixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ25CLEdBQUcsR0FBR0EsUUFBUSxRQUFRQSxRQUFRLEtBQUssSUFBSUEsTUFBTSxDQUFDO1FBQ25ELElBQUksQ0FBQ29CLGlCQUFpQixHQUFHLENBQUNsQixLQUFLRCxRQUFRb0IsYUFBYSxNQUFNLFFBQVFuQixPQUFPLEtBQUssSUFBSUEsS0FBSyxDQUFDRCxRQUFRcUIsT0FBTztRQUN2RyxJQUFJLENBQUNDLHVCQUF1QixHQUN4QixDQUFDcEIsS0FBS0YsUUFBUXNCLHVCQUF1QixNQUFNLFFBQVFwQixPQUFPLEtBQUssSUFBSUEsS0FBSyxDQUFDRixRQUFRcUIsT0FBTztRQUM1RixJQUFJLENBQUNFLFNBQVMsR0FBRyxJQUFLLEVBQUNwQixLQUFLSCxRQUFRd0IsU0FBUyxNQUFNLFFBQVFyQixPQUFPLEtBQUssSUFBSUEsS0FBS25CLGVBQWV5QyxPQUFPLEVBQUUsSUFBSSxDQUFDekIsT0FBTyxFQUFFLElBQUk7UUFDekhLLENBQUFBLEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNMLEdBQUcsRUFBRTJCLFlBQVksTUFBTSxRQUFRckIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHeEIsSUFBSSxDQUFDdUIsSUFBSSxJQUFJO0lBQzdGO0lBQ0EsMkJBQTJCO0lBQzNCLGNBQWMsR0FDZHJCLE9BQU9KLFNBQVMsQ0FBQ2dELE1BQU0sR0FBRyxTQUFVQyxLQUFLLEVBQUVyQixRQUFRO1FBQy9DLElBQUlOLElBQUlDO1FBQ1IsSUFBSTJCLE9BQU8sSUFBSSxDQUFDQyxRQUFRLENBQUNGLE9BQU9yQjtRQUNoQyxJQUFJLENBQUNBLFFBQVEsR0FBR0EsV0FBVztRQUMxQkwsQ0FBQUEsS0FBSyxDQUFDRCxLQUFLLElBQUksQ0FBQ0YsR0FBRyxFQUFFNEIsTUFBTSxNQUFNLFFBQVF6QixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdyQixJQUFJLENBQUNvQixJQUFJNEI7UUFDL0UsSUFBSSxDQUFDdkIsVUFBVSxHQUFHQztJQUN0QjtJQUNBLGNBQWMsR0FDZHhCLE9BQU9KLFNBQVMsQ0FBQ29ELFlBQVksR0FBRyxTQUFVQyxFQUFFO1FBQ3hDLElBQUkvQixJQUFJQztRQUNSOzs7U0FHQyxHQUNELElBQUkrQixRQUFRLElBQUksQ0FBQ1YsU0FBUyxDQUFDVyxlQUFlO1FBQzFDLElBQUksQ0FBQzNCLFFBQVEsR0FBRzBCLFFBQVE7UUFDdkIvQixDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDRixHQUFHLEVBQUU0QixNQUFNLE1BQU0sUUFBUXpCLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3JCLElBQUksQ0FBQ29CLElBQUksQ0FBQyxHQUFHZixZQUFZaUQsYUFBYSxFQUFFSDtRQUM5RyxJQUFJLENBQUMxQixVQUFVLEdBQUcyQjtJQUN0QjtJQUNBbEQsT0FBT0osU0FBUyxDQUFDeUQsYUFBYSxHQUFHLFNBQVVDLElBQUk7UUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQ3JDLE9BQU8sQ0FBQ3FCLE9BQU8sSUFBSTFCLGFBQWEyQyxHQUFHLENBQUNEO0lBQ3JEO0lBQ0EsY0FBYyxHQUNkdEQsT0FBT0osU0FBUyxDQUFDNEQsYUFBYSxHQUFHLFNBQVVYLEtBQUssRUFBRXJCLFFBQVE7UUFDdEQsSUFBSSxDQUFDQSxRQUFRLEdBQUdBO1FBQ2hCLElBQUk4QixPQUFPLElBQUksQ0FBQ1AsUUFBUSxDQUFDRixPQUFPckI7UUFDaEMsSUFBSSxJQUFJLENBQUNZLGlCQUFpQixFQUFFO1lBQ3hCa0IsT0FBT0EsS0FBS0csV0FBVztRQUMzQjtRQUNBLElBQUksQ0FBQ0MsV0FBVyxDQUFDSjtJQUNyQjtJQUNBdEQsT0FBT0osU0FBUyxDQUFDOEQsV0FBVyxHQUFHLFNBQVVKLElBQUk7UUFDekMsSUFBSXBDLElBQUlDLElBQUlDLElBQUlDO1FBQ2hCLElBQUksQ0FBQ0ksWUFBWSxHQUFHLElBQUksQ0FBQ0YsVUFBVTtRQUNuQyxJQUFJLENBQUNHLE9BQU8sR0FBRzRCO1FBQ2YsSUFBSUssZUFBZSxDQUFDLElBQUksQ0FBQzFDLE9BQU8sQ0FBQ3FCLE9BQU8sSUFBSTVCLGlCQUFpQnRCLEdBQUcsQ0FBQ2tFO1FBQ2pFLElBQUlLLGNBQWM7WUFDZCxNQUFPLElBQUksQ0FBQzdCLEtBQUssQ0FBQzhCLE1BQU0sR0FBRyxLQUN2QkQsYUFBYUosR0FBRyxDQUFDLElBQUksQ0FBQ3pCLEtBQUssQ0FBQyxJQUFJLENBQUNBLEtBQUssQ0FBQzhCLE1BQU0sR0FBRyxFQUFFLEVBQUc7Z0JBQ3JELElBQUlDLFVBQVUsSUFBSSxDQUFDL0IsS0FBSyxDQUFDZ0MsR0FBRztnQkFDM0IzQyxDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDRixHQUFHLEVBQUUrQyxVQUFVLE1BQU0sUUFBUTVDLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3JCLElBQUksQ0FBQ29CLElBQUkyQyxTQUFTO1lBQ2hHO1FBQ0o7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDUixhQUFhLENBQUNDLE9BQU87WUFDM0IsSUFBSSxDQUFDeEIsS0FBSyxDQUFDa0MsSUFBSSxDQUFDVjtZQUNoQixJQUFJekMsdUJBQXVCMEMsR0FBRyxDQUFDRCxPQUFPO2dCQUNsQyxJQUFJLENBQUN2QixjQUFjLENBQUNpQyxJQUFJLENBQUM7WUFDN0IsT0FDSyxJQUFJbEQsd0JBQXdCeUMsR0FBRyxDQUFDRCxPQUFPO2dCQUN4QyxJQUFJLENBQUN2QixjQUFjLENBQUNpQyxJQUFJLENBQUM7WUFDN0I7UUFDSjtRQUNDM0MsQ0FBQUEsS0FBSyxDQUFDRCxLQUFLLElBQUksQ0FBQ0osR0FBRyxFQUFFd0MsYUFBYSxNQUFNLFFBQVFuQyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUd2QixJQUFJLENBQUNzQixJQUFJa0M7UUFDdEYsSUFBSSxJQUFJLENBQUN0QyxHQUFHLENBQUNpRCxTQUFTLEVBQ2xCLElBQUksQ0FBQ3BDLE9BQU8sR0FBRyxDQUFDO0lBQ3hCO0lBQ0E3QixPQUFPSixTQUFTLENBQUNzRSxVQUFVLEdBQUcsU0FBVUMsU0FBUztRQUM3QyxJQUFJakQsSUFBSUM7UUFDUixJQUFJLENBQUNJLFVBQVUsR0FBRyxJQUFJLENBQUNFLFlBQVk7UUFDbkMsSUFBSSxJQUFJLENBQUNJLE9BQU8sRUFBRTtZQUNiVixDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDRixHQUFHLEVBQUVpRCxTQUFTLE1BQU0sUUFBUTlDLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3JCLElBQUksQ0FBQ29CLElBQUksSUFBSSxDQUFDUSxPQUFPLEVBQUUsSUFBSSxDQUFDRyxPQUFPLEVBQUVzQztZQUM5RyxJQUFJLENBQUN0QyxPQUFPLEdBQUc7UUFDbkI7UUFDQSxJQUFJLElBQUksQ0FBQ2IsR0FBRyxDQUFDK0MsVUFBVSxJQUFJLElBQUksQ0FBQ1YsYUFBYSxDQUFDLElBQUksQ0FBQzNCLE9BQU8sR0FBRztZQUN6RCxJQUFJLENBQUNWLEdBQUcsQ0FBQytDLFVBQVUsQ0FBQyxJQUFJLENBQUNyQyxPQUFPLEVBQUU7UUFDdEM7UUFDQSxJQUFJLENBQUNBLE9BQU8sR0FBRztJQUNuQjtJQUNBLGNBQWMsR0FDZDFCLE9BQU9KLFNBQVMsQ0FBQ3dFLFlBQVksR0FBRyxTQUFVNUMsUUFBUTtRQUM5QyxJQUFJLENBQUNBLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDMEMsVUFBVSxDQUFDO1FBQ2hCLGlDQUFpQztRQUNqQyxJQUFJLENBQUMzQyxVQUFVLEdBQUdDLFdBQVc7SUFDakM7SUFDQSxjQUFjLEdBQ2R4QixPQUFPSixTQUFTLENBQUNtRSxVQUFVLEdBQUcsU0FBVWxCLEtBQUssRUFBRXJCLFFBQVE7UUFDbkQsSUFBSU4sSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSStDO1FBQ3hCLElBQUksQ0FBQzdDLFFBQVEsR0FBR0E7UUFDaEIsSUFBSThCLE9BQU8sSUFBSSxDQUFDUCxRQUFRLENBQUNGLE9BQU9yQjtRQUNoQyxJQUFJLElBQUksQ0FBQ1ksaUJBQWlCLEVBQUU7WUFDeEJrQixPQUFPQSxLQUFLRyxXQUFXO1FBQzNCO1FBQ0EsSUFBSTVDLHVCQUF1QjBDLEdBQUcsQ0FBQ0QsU0FDM0J4Qyx3QkFBd0J5QyxHQUFHLENBQUNELE9BQU87WUFDbkMsSUFBSSxDQUFDdkIsY0FBYyxDQUFDK0IsR0FBRztRQUMzQjtRQUNBLElBQUksQ0FBQyxJQUFJLENBQUNULGFBQWEsQ0FBQ0MsT0FBTztZQUMzQixJQUFJZ0IsTUFBTSxJQUFJLENBQUN4QyxLQUFLLENBQUN5QyxXQUFXLENBQUNqQjtZQUNqQyxJQUFJZ0IsUUFBUSxDQUFDLEdBQUc7Z0JBQ1osSUFBSSxJQUFJLENBQUN0RCxHQUFHLENBQUMrQyxVQUFVLEVBQUU7b0JBQ3JCLElBQUlTLFFBQVEsSUFBSSxDQUFDMUMsS0FBSyxDQUFDOEIsTUFBTSxHQUFHVTtvQkFDaEMsTUFBT0UsUUFBUzt3QkFDWiw2Q0FBNkM7d0JBQzdDLElBQUksQ0FBQ3hELEdBQUcsQ0FBQytDLFVBQVUsQ0FBQyxJQUFJLENBQUNqQyxLQUFLLENBQUNnQyxHQUFHLElBQUlVLFVBQVU7b0JBQ3BEO2dCQUNKLE9BRUksSUFBSSxDQUFDMUMsS0FBSyxDQUFDOEIsTUFBTSxHQUFHVTtZQUM1QixPQUNLLElBQUksQ0FBQyxJQUFJLENBQUNyRCxPQUFPLENBQUNxQixPQUFPLElBQUlnQixTQUFTLEtBQUs7Z0JBQzVDLDZCQUE2QjtnQkFDN0IsSUFBSSxDQUFDSSxXQUFXLENBQUM7Z0JBQ2pCLElBQUksQ0FBQ2UsZUFBZSxDQUFDO1lBQ3pCO1FBQ0osT0FDSyxJQUFJLENBQUMsSUFBSSxDQUFDeEQsT0FBTyxDQUFDcUIsT0FBTyxJQUFJZ0IsU0FBUyxNQUFNO1lBQzdDLG9GQUFvRjtZQUNuRm5DLENBQUFBLEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNGLEdBQUcsRUFBRXdDLGFBQWEsTUFBTSxRQUFRckMsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHckIsSUFBSSxDQUFDb0IsSUFBSTtZQUNyRkcsQ0FBQUEsS0FBSyxDQUFDRCxLQUFLLElBQUksQ0FBQ0osR0FBRyxFQUFFaUQsU0FBUyxNQUFNLFFBQVE1QyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUd2QixJQUFJLENBQUNzQixJQUFJLE1BQU0sQ0FBQyxHQUFHO1lBQzNGaUQsQ0FBQUEsS0FBSyxDQUFDL0MsS0FBSyxJQUFJLENBQUNOLEdBQUcsRUFBRStDLFVBQVUsTUFBTSxRQUFRTSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUd2RSxJQUFJLENBQUN3QixJQUFJLE1BQU07UUFDN0Y7UUFDQSxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDQyxVQUFVLEdBQUdDLFdBQVc7SUFDakM7SUFDQSxjQUFjLEdBQ2R4QixPQUFPSixTQUFTLENBQUM4RSxnQkFBZ0IsR0FBRyxTQUFVbEQsUUFBUTtRQUNsRCxJQUFJLENBQUNBLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxJQUFJLENBQUNQLE9BQU8sQ0FBQ3FCLE9BQU8sSUFDcEIsSUFBSSxDQUFDckIsT0FBTyxDQUFDMEQsb0JBQW9CLElBQ2pDLElBQUksQ0FBQzVDLGNBQWMsQ0FBQyxJQUFJLENBQUNBLGNBQWMsQ0FBQzZCLE1BQU0sR0FBRyxFQUFFLEVBQUU7WUFDckQsSUFBSSxDQUFDYSxlQUFlLENBQUM7WUFDckIsaUNBQWlDO1lBQ2pDLElBQUksQ0FBQ2xELFVBQVUsR0FBR0MsV0FBVztRQUNqQyxPQUNLO1lBQ0QsZ0RBQWdEO1lBQ2hELElBQUksQ0FBQzRDLFlBQVksQ0FBQzVDO1FBQ3RCO0lBQ0o7SUFDQXhCLE9BQU9KLFNBQVMsQ0FBQzZFLGVBQWUsR0FBRyxTQUFVRyxhQUFhO1FBQ3RELElBQUkxRCxJQUFJQztRQUNSLElBQUltQyxPQUFPLElBQUksQ0FBQzVCLE9BQU87UUFDdkIsSUFBSSxDQUFDd0MsVUFBVSxDQUFDVTtRQUNoQixvREFBb0Q7UUFDcEQsSUFBSSxJQUFJLENBQUM5QyxLQUFLLENBQUMsSUFBSSxDQUFDQSxLQUFLLENBQUM4QixNQUFNLEdBQUcsRUFBRSxLQUFLTixNQUFNO1lBQzVDLHVFQUF1RTtZQUN0RW5DLENBQUFBLEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNGLEdBQUcsRUFBRStDLFVBQVUsTUFBTSxRQUFRNUMsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHckIsSUFBSSxDQUFDb0IsSUFBSW9DLE1BQU0sQ0FBQ3NCO1lBQzFGLElBQUksQ0FBQzlDLEtBQUssQ0FBQ2dDLEdBQUc7UUFDbEI7SUFDSjtJQUNBLGNBQWMsR0FDZDlELE9BQU9KLFNBQVMsQ0FBQ2lGLFlBQVksR0FBRyxTQUFVaEMsS0FBSyxFQUFFckIsUUFBUTtRQUNyRCxJQUFJLENBQUNELFVBQVUsR0FBR3NCO1FBQ2xCLElBQUlTLE9BQU8sSUFBSSxDQUFDUCxRQUFRLENBQUNGLE9BQU9yQjtRQUNoQyxJQUFJLENBQUNHLFVBQVUsR0FBRyxJQUFJLENBQUNZLHVCQUF1QixHQUN4Q2UsS0FBS0csV0FBVyxLQUNoQkg7SUFDVjtJQUNBLGNBQWMsR0FDZHRELE9BQU9KLFNBQVMsQ0FBQ2tGLFlBQVksR0FBRyxTQUFVakMsS0FBSyxFQUFFckIsUUFBUTtRQUNyRCxJQUFJLENBQUNJLFdBQVcsSUFBSSxJQUFJLENBQUNtQixRQUFRLENBQUNGLE9BQU9yQjtJQUM3QztJQUNBLGNBQWMsR0FDZHhCLE9BQU9KLFNBQVMsQ0FBQ21GLGNBQWMsR0FBRyxTQUFVOUIsRUFBRTtRQUMxQyxJQUFJLENBQUNyQixXQUFXLElBQUksQ0FBQyxHQUFHekIsWUFBWWlELGFBQWEsRUFBRUg7SUFDdkQ7SUFDQSxjQUFjLEdBQ2RqRCxPQUFPSixTQUFTLENBQUNvRixXQUFXLEdBQUcsU0FBVUMsS0FBSyxFQUFFekQsUUFBUTtRQUNwRCxJQUFJTixJQUFJQztRQUNSLElBQUksQ0FBQ0ssUUFBUSxHQUFHQTtRQUNmTCxDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDRixHQUFHLEVBQUVrRSxXQUFXLE1BQU0sUUFBUS9ELE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3JCLElBQUksQ0FBQ29CLElBQUksSUFBSSxDQUFDUyxVQUFVLEVBQUUsSUFBSSxDQUFDQyxXQUFXLEVBQUVxRCxVQUFVaEYsZUFBZWtGLFNBQVMsQ0FBQ0MsTUFBTSxHQUMxSixNQUNBSCxVQUFVaEYsZUFBZWtGLFNBQVMsQ0FBQ0UsTUFBTSxHQUNyQyxNQUNBSixVQUFVaEYsZUFBZWtGLFNBQVMsQ0FBQ0csT0FBTyxHQUN0Q3pHLFlBQ0E7UUFDZCxJQUFJLElBQUksQ0FBQ2dELE9BQU8sSUFDWixDQUFDdEQsT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDK0IsT0FBTyxFQUFFLElBQUksQ0FBQ0YsVUFBVSxHQUFHO1lBQ3RFLElBQUksQ0FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQ0YsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDQyxXQUFXO1FBQ3BEO1FBQ0EsSUFBSSxDQUFDQSxXQUFXLEdBQUc7SUFDdkI7SUFDQTVCLE9BQU9KLFNBQVMsQ0FBQzJGLGtCQUFrQixHQUFHLFNBQVUvRixLQUFLO1FBQ2pELElBQUkwRCxRQUFRMUQsTUFBTWdHLE1BQU0sQ0FBQ3pFO1FBQ3pCLElBQUl1QyxPQUFPSixRQUFRLElBQUkxRCxRQUFRQSxNQUFNaUcsTUFBTSxDQUFDLEdBQUd2QztRQUMvQyxJQUFJLElBQUksQ0FBQ2QsaUJBQWlCLEVBQUU7WUFDeEJrQixPQUFPQSxLQUFLRyxXQUFXO1FBQzNCO1FBQ0EsT0FBT0g7SUFDWDtJQUNBLGNBQWMsR0FDZHRELE9BQU9KLFNBQVMsQ0FBQzhGLGFBQWEsR0FBRyxTQUFVN0MsS0FBSyxFQUFFckIsUUFBUTtRQUN0RCxJQUFJLENBQUNBLFFBQVEsR0FBR0E7UUFDaEIsSUFBSWhDLFFBQVEsSUFBSSxDQUFDdUQsUUFBUSxDQUFDRixPQUFPckI7UUFDakMsSUFBSSxJQUFJLENBQUNSLEdBQUcsQ0FBQzJFLHVCQUF1QixFQUFFO1lBQ2xDLElBQUlyQyxPQUFPLElBQUksQ0FBQ2lDLGtCQUFrQixDQUFDL0Y7WUFDbkMsSUFBSSxDQUFDd0IsR0FBRyxDQUFDMkUsdUJBQXVCLENBQUMsSUFBSUMsTUFBTSxDQUFDdEMsT0FBTyxJQUFJc0MsTUFBTSxDQUFDcEc7UUFDbEU7UUFDQSxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDK0IsVUFBVSxHQUFHQyxXQUFXO0lBQ2pDO0lBQ0EsY0FBYyxHQUNkeEIsT0FBT0osU0FBUyxDQUFDK0YsdUJBQXVCLEdBQUcsU0FBVTlDLEtBQUssRUFBRXJCLFFBQVE7UUFDaEUsSUFBSSxDQUFDQSxRQUFRLEdBQUdBO1FBQ2hCLElBQUloQyxRQUFRLElBQUksQ0FBQ3VELFFBQVEsQ0FBQ0YsT0FBT3JCO1FBQ2pDLElBQUksSUFBSSxDQUFDUixHQUFHLENBQUMyRSx1QkFBdUIsRUFBRTtZQUNsQyxJQUFJckMsT0FBTyxJQUFJLENBQUNpQyxrQkFBa0IsQ0FBQy9GO1lBQ25DLElBQUksQ0FBQ3dCLEdBQUcsQ0FBQzJFLHVCQUF1QixDQUFDLElBQUlDLE1BQU0sQ0FBQ3RDLE9BQU8sSUFBSXNDLE1BQU0sQ0FBQ3BHO1FBQ2xFO1FBQ0EsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQytCLFVBQVUsR0FBR0MsV0FBVztJQUNqQztJQUNBLGNBQWMsR0FDZHhCLE9BQU9KLFNBQVMsQ0FBQ2lHLFNBQVMsR0FBRyxTQUFVaEQsS0FBSyxFQUFFckIsUUFBUSxFQUFFc0UsTUFBTTtRQUMxRCxJQUFJNUUsSUFBSUMsSUFBSUMsSUFBSUM7UUFDaEIsSUFBSSxDQUFDRyxRQUFRLEdBQUdBO1FBQ2ZMLENBQUFBLEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNGLEdBQUcsRUFBRTZFLFNBQVMsTUFBTSxRQUFRMUUsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHckIsSUFBSSxDQUFDb0IsSUFBSSxJQUFJLENBQUM2QixRQUFRLENBQUNGLE9BQU9yQixXQUFXc0U7UUFDakh6RSxDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDSixHQUFHLEVBQUUrRSxZQUFZLE1BQU0sUUFBUTFFLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3ZCLElBQUksQ0FBQ3NCO1FBQ2pGLGlDQUFpQztRQUNqQyxJQUFJLENBQUNHLFVBQVUsR0FBR0MsV0FBVztJQUNqQztJQUNBLGNBQWMsR0FDZHhCLE9BQU9KLFNBQVMsQ0FBQ29HLE9BQU8sR0FBRyxTQUFVbkQsS0FBSyxFQUFFckIsUUFBUSxFQUFFc0UsTUFBTTtRQUN4RCxJQUFJNUUsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSStDLElBQUk0QixJQUFJQyxJQUFJQyxJQUFJQztRQUN4QyxJQUFJLENBQUM1RSxRQUFRLEdBQUdBO1FBQ2hCLElBQUloQyxRQUFRLElBQUksQ0FBQ3VELFFBQVEsQ0FBQ0YsT0FBT3JCLFdBQVdzRTtRQUM1QyxJQUFJLElBQUksQ0FBQzdFLE9BQU8sQ0FBQ3FCLE9BQU8sSUFBSSxJQUFJLENBQUNyQixPQUFPLENBQUNvRixjQUFjLEVBQUU7WUFDcERsRixDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDRixHQUFHLEVBQUVzRixZQUFZLE1BQU0sUUFBUW5GLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3JCLElBQUksQ0FBQ29CO1lBQ2hGRyxDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDSixHQUFHLEVBQUU0QixNQUFNLE1BQU0sUUFBUXZCLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3ZCLElBQUksQ0FBQ3NCLElBQUk1QjtZQUM5RTZFLENBQUFBLEtBQUssQ0FBQy9DLEtBQUssSUFBSSxDQUFDTixHQUFHLEVBQUV1RixVQUFVLE1BQU0sUUFBUWxDLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3ZFLElBQUksQ0FBQ3dCO1FBQ25GLE9BQ0s7WUFDQTRFLENBQUFBLEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNqRixHQUFHLEVBQUU2RSxTQUFTLE1BQU0sUUFBUUssT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHcEcsSUFBSSxDQUFDbUcsSUFBSSxVQUFVTCxNQUFNLENBQUNwRyxPQUFPO1lBQ3pHNEcsQ0FBQUEsS0FBSyxDQUFDRCxLQUFLLElBQUksQ0FBQ25GLEdBQUcsRUFBRStFLFlBQVksTUFBTSxRQUFRSyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUd0RyxJQUFJLENBQUNxRztRQUNyRjtRQUNBLGlDQUFpQztRQUNqQyxJQUFJLENBQUM1RSxVQUFVLEdBQUdDLFdBQVc7SUFDakM7SUFDQSxjQUFjLEdBQ2R4QixPQUFPSixTQUFTLENBQUM0RyxLQUFLLEdBQUc7UUFDckIsSUFBSXRGLElBQUlDO1FBQ1IsSUFBSSxJQUFJLENBQUNILEdBQUcsQ0FBQytDLFVBQVUsRUFBRTtZQUNyQiwyQ0FBMkM7WUFDM0MsSUFBSSxDQUFDdkMsUUFBUSxHQUFHLElBQUksQ0FBQ0QsVUFBVTtZQUMvQixJQUFLLElBQUkyQixRQUFRLElBQUksQ0FBQ3BCLEtBQUssQ0FBQzhCLE1BQU0sRUFBRVYsUUFBUSxHQUFHLElBQUksQ0FBQ2xDLEdBQUcsQ0FBQytDLFVBQVUsQ0FBQyxJQUFJLENBQUNqQyxLQUFLLENBQUMsRUFBRW9CLE1BQU0sRUFBRTtRQUU1RjtRQUNDL0IsQ0FBQUEsS0FBSyxDQUFDRCxLQUFLLElBQUksQ0FBQ0YsR0FBRyxFQUFFd0YsS0FBSyxNQUFNLFFBQVFyRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdyQixJQUFJLENBQUNvQjtJQUM5RTtJQUNBOztLQUVDLEdBQ0RsQixPQUFPSixTQUFTLENBQUM2RyxLQUFLLEdBQUc7UUFDckIsSUFBSXZGLElBQUlDLElBQUlDLElBQUlDO1FBQ2ZGLENBQUFBLEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNGLEdBQUcsRUFBRTBGLE9BQU8sTUFBTSxRQUFRdkYsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHckIsSUFBSSxDQUFDb0I7UUFDNUUsSUFBSSxDQUFDc0IsU0FBUyxDQUFDaUUsS0FBSztRQUNwQixJQUFJLENBQUMvRSxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNFLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsS0FBSyxDQUFDOEIsTUFBTSxHQUFHO1FBQ3BCLElBQUksQ0FBQ3JDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNmSCxDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDSixHQUFHLEVBQUUyQixZQUFZLE1BQU0sUUFBUXRCLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3ZCLElBQUksQ0FBQ3NCLElBQUksSUFBSTtRQUN6RixJQUFJLENBQUNZLE9BQU8sQ0FBQzRCLE1BQU0sR0FBRztRQUN0QixJQUFJLENBQUMzQixZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDQyxLQUFLLEdBQUc7SUFDakI7SUFDQTs7Ozs7S0FLQyxHQUNEbkMsT0FBT0osU0FBUyxDQUFDK0csYUFBYSxHQUFHLFNBQVU3RCxJQUFJO1FBQzNDLElBQUksQ0FBQzJELEtBQUs7UUFDVixJQUFJLENBQUNHLEdBQUcsQ0FBQzlEO0lBQ2I7SUFDQTlDLE9BQU9KLFNBQVMsQ0FBQ21ELFFBQVEsR0FBRyxTQUFVRixLQUFLLEVBQUUrRCxHQUFHO1FBQzVDLE1BQU8vRCxRQUFRLElBQUksQ0FBQ1osWUFBWSxJQUFJLElBQUksQ0FBQ0QsT0FBTyxDQUFDLEVBQUUsQ0FBQzRCLE1BQU0sQ0FBRTtZQUN4RCxJQUFJLENBQUNpRCxXQUFXO1FBQ3BCO1FBQ0EsSUFBSUMsUUFBUSxJQUFJLENBQUM5RSxPQUFPLENBQUMsRUFBRSxDQUFDOEUsS0FBSyxDQUFDakUsUUFBUSxJQUFJLENBQUNaLFlBQVksRUFBRTJFLE1BQU0sSUFBSSxDQUFDM0UsWUFBWTtRQUNwRixNQUFPMkUsTUFBTSxJQUFJLENBQUMzRSxZQUFZLEdBQUcsSUFBSSxDQUFDRCxPQUFPLENBQUMsRUFBRSxDQUFDNEIsTUFBTSxDQUFFO1lBQ3JELElBQUksQ0FBQ2lELFdBQVc7WUFDaEJDLFNBQVMsSUFBSSxDQUFDOUUsT0FBTyxDQUFDLEVBQUUsQ0FBQzhFLEtBQUssQ0FBQyxHQUFHRixNQUFNLElBQUksQ0FBQzNFLFlBQVk7UUFDN0Q7UUFDQSxPQUFPNkU7SUFDWDtJQUNBOUcsT0FBT0osU0FBUyxDQUFDaUgsV0FBVyxHQUFHO1FBQzNCLElBQUksQ0FBQzVFLFlBQVksSUFBSSxJQUFJLENBQUNELE9BQU8sQ0FBQyxFQUFFLENBQUM0QixNQUFNO1FBQzNDLElBQUksQ0FBQzFCLFVBQVU7UUFDZixJQUFJLENBQUNGLE9BQU8sQ0FBQytFLEtBQUs7SUFDdEI7SUFDQTs7OztLQUlDLEdBQ0QvRyxPQUFPSixTQUFTLENBQUNvSCxLQUFLLEdBQUcsU0FBVUMsS0FBSztRQUNwQyxJQUFJL0YsSUFBSUM7UUFDUixJQUFJLElBQUksQ0FBQ2dCLEtBQUssRUFBRTtZQUNYaEIsQ0FBQUEsS0FBSyxDQUFDRCxLQUFLLElBQUksQ0FBQ0YsR0FBRyxFQUFFa0csT0FBTyxNQUFNLFFBQVEvRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdyQixJQUFJLENBQUNvQixJQUFJLElBQUlpRyxNQUFNO1lBQzFGO1FBQ0o7UUFDQSxJQUFJLENBQUNuRixPQUFPLENBQUNnQyxJQUFJLENBQUNpRDtRQUNsQixJQUFJLElBQUksQ0FBQ3pFLFNBQVMsQ0FBQzRFLE9BQU8sRUFBRTtZQUN4QixJQUFJLENBQUM1RSxTQUFTLENBQUN3RSxLQUFLLENBQUNDO1lBQ3JCLElBQUksQ0FBQy9FLFVBQVU7UUFDbkI7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRGxDLE9BQU9KLFNBQVMsQ0FBQ2dILEdBQUcsR0FBRyxTQUFVSyxLQUFLO1FBQ2xDLElBQUkvRixJQUFJQztRQUNSLElBQUksSUFBSSxDQUFDZ0IsS0FBSyxFQUFFO1lBQ1hoQixDQUFBQSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDRixHQUFHLEVBQUVrRyxPQUFPLE1BQU0sUUFBUS9GLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR3JCLElBQUksQ0FBQ29CLElBQUksSUFBSWlHLE1BQU07WUFDMUY7UUFDSjtRQUNBLElBQUlGLE9BQ0EsSUFBSSxDQUFDRCxLQUFLLENBQUNDO1FBQ2YsSUFBSSxDQUFDOUUsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDSyxTQUFTLENBQUNvRSxHQUFHO0lBQ3RCO0lBQ0E7O0tBRUMsR0FDRDVHLE9BQU9KLFNBQVMsQ0FBQ3lILEtBQUssR0FBRztRQUNyQixJQUFJLENBQUM3RSxTQUFTLENBQUM2RSxLQUFLO0lBQ3hCO0lBQ0E7O0tBRUMsR0FDRHJILE9BQU9KLFNBQVMsQ0FBQzBILE1BQU0sR0FBRztRQUN0QixJQUFJLENBQUM5RSxTQUFTLENBQUM4RSxNQUFNO1FBQ3JCLE1BQU8sSUFBSSxDQUFDOUUsU0FBUyxDQUFDNEUsT0FBTyxJQUN6QixJQUFJLENBQUNsRixVQUFVLEdBQUcsSUFBSSxDQUFDRixPQUFPLENBQUM0QixNQUFNLENBQUU7WUFDdkMsSUFBSSxDQUFDcEIsU0FBUyxDQUFDd0UsS0FBSyxDQUFDLElBQUksQ0FBQ2hGLE9BQU8sQ0FBQyxJQUFJLENBQUNFLFVBQVUsR0FBRztRQUN4RDtRQUNBLElBQUksSUFBSSxDQUFDQyxLQUFLLEVBQ1YsSUFBSSxDQUFDSyxTQUFTLENBQUNvRSxHQUFHO0lBQzFCO0lBQ0E7Ozs7O0tBS0MsR0FDRDVHLE9BQU9KLFNBQVMsQ0FBQzJILFVBQVUsR0FBRyxTQUFVTixLQUFLO1FBQ3pDLElBQUksQ0FBQ0QsS0FBSyxDQUFDQztJQUNmO0lBQ0E7Ozs7O0tBS0MsR0FDRGpILE9BQU9KLFNBQVMsQ0FBQzRILElBQUksR0FBRyxTQUFVUCxLQUFLO1FBQ25DLElBQUksQ0FBQ0wsR0FBRyxDQUFDSztJQUNiO0lBQ0EsT0FBT2pIO0FBQ1g7QUFDQUQsY0FBYyxHQUFHQyxRQUNqQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0ZXJ5LW1lc3NhZ2UvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1BhcnNlci5qcz8zMWM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhcnNlciA9IHZvaWQgMDtcbnZhciBUb2tlbml6ZXJfanNfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9Ub2tlbml6ZXIuanNcIikpO1xudmFyIGRlY29kZV9qc18xID0gcmVxdWlyZShcImVudGl0aWVzL2xpYi9kZWNvZGUuanNcIik7XG52YXIgZm9ybVRhZ3MgPSBuZXcgU2V0KFtcbiAgICBcImlucHV0XCIsXG4gICAgXCJvcHRpb25cIixcbiAgICBcIm9wdGdyb3VwXCIsXG4gICAgXCJzZWxlY3RcIixcbiAgICBcImJ1dHRvblwiLFxuICAgIFwiZGF0YWxpc3RcIixcbiAgICBcInRleHRhcmVhXCIsXG5dKTtcbnZhciBwVGFnID0gbmV3IFNldChbXCJwXCJdKTtcbnZhciB0YWJsZVNlY3Rpb25UYWdzID0gbmV3IFNldChbXCJ0aGVhZFwiLCBcInRib2R5XCJdKTtcbnZhciBkZHRUYWdzID0gbmV3IFNldChbXCJkZFwiLCBcImR0XCJdKTtcbnZhciBydHBUYWdzID0gbmV3IFNldChbXCJydFwiLCBcInJwXCJdKTtcbnZhciBvcGVuSW1wbGllc0Nsb3NlID0gbmV3IE1hcChbXG4gICAgW1widHJcIiwgbmV3IFNldChbXCJ0clwiLCBcInRoXCIsIFwidGRcIl0pXSxcbiAgICBbXCJ0aFwiLCBuZXcgU2V0KFtcInRoXCJdKV0sXG4gICAgW1widGRcIiwgbmV3IFNldChbXCJ0aGVhZFwiLCBcInRoXCIsIFwidGRcIl0pXSxcbiAgICBbXCJib2R5XCIsIG5ldyBTZXQoW1wiaGVhZFwiLCBcImxpbmtcIiwgXCJzY3JpcHRcIl0pXSxcbiAgICBbXCJsaVwiLCBuZXcgU2V0KFtcImxpXCJdKV0sXG4gICAgW1wicFwiLCBwVGFnXSxcbiAgICBbXCJoMVwiLCBwVGFnXSxcbiAgICBbXCJoMlwiLCBwVGFnXSxcbiAgICBbXCJoM1wiLCBwVGFnXSxcbiAgICBbXCJoNFwiLCBwVGFnXSxcbiAgICBbXCJoNVwiLCBwVGFnXSxcbiAgICBbXCJoNlwiLCBwVGFnXSxcbiAgICBbXCJzZWxlY3RcIiwgZm9ybVRhZ3NdLFxuICAgIFtcImlucHV0XCIsIGZvcm1UYWdzXSxcbiAgICBbXCJvdXRwdXRcIiwgZm9ybVRhZ3NdLFxuICAgIFtcImJ1dHRvblwiLCBmb3JtVGFnc10sXG4gICAgW1wiZGF0YWxpc3RcIiwgZm9ybVRhZ3NdLFxuICAgIFtcInRleHRhcmVhXCIsIGZvcm1UYWdzXSxcbiAgICBbXCJvcHRpb25cIiwgbmV3IFNldChbXCJvcHRpb25cIl0pXSxcbiAgICBbXCJvcHRncm91cFwiLCBuZXcgU2V0KFtcIm9wdGdyb3VwXCIsIFwib3B0aW9uXCJdKV0sXG4gICAgW1wiZGRcIiwgZGR0VGFnc10sXG4gICAgW1wiZHRcIiwgZGR0VGFnc10sXG4gICAgW1wiYWRkcmVzc1wiLCBwVGFnXSxcbiAgICBbXCJhcnRpY2xlXCIsIHBUYWddLFxuICAgIFtcImFzaWRlXCIsIHBUYWddLFxuICAgIFtcImJsb2NrcXVvdGVcIiwgcFRhZ10sXG4gICAgW1wiZGV0YWlsc1wiLCBwVGFnXSxcbiAgICBbXCJkaXZcIiwgcFRhZ10sXG4gICAgW1wiZGxcIiwgcFRhZ10sXG4gICAgW1wiZmllbGRzZXRcIiwgcFRhZ10sXG4gICAgW1wiZmlnY2FwdGlvblwiLCBwVGFnXSxcbiAgICBbXCJmaWd1cmVcIiwgcFRhZ10sXG4gICAgW1wiZm9vdGVyXCIsIHBUYWddLFxuICAgIFtcImZvcm1cIiwgcFRhZ10sXG4gICAgW1wiaGVhZGVyXCIsIHBUYWddLFxuICAgIFtcImhyXCIsIHBUYWddLFxuICAgIFtcIm1haW5cIiwgcFRhZ10sXG4gICAgW1wibmF2XCIsIHBUYWddLFxuICAgIFtcIm9sXCIsIHBUYWddLFxuICAgIFtcInByZVwiLCBwVGFnXSxcbiAgICBbXCJzZWN0aW9uXCIsIHBUYWddLFxuICAgIFtcInRhYmxlXCIsIHBUYWddLFxuICAgIFtcInVsXCIsIHBUYWddLFxuICAgIFtcInJ0XCIsIHJ0cFRhZ3NdLFxuICAgIFtcInJwXCIsIHJ0cFRhZ3NdLFxuICAgIFtcInRib2R5XCIsIHRhYmxlU2VjdGlvblRhZ3NdLFxuICAgIFtcInRmb290XCIsIHRhYmxlU2VjdGlvblRhZ3NdLFxuXSk7XG52YXIgdm9pZEVsZW1lbnRzID0gbmV3IFNldChbXG4gICAgXCJhcmVhXCIsXG4gICAgXCJiYXNlXCIsXG4gICAgXCJiYXNlZm9udFwiLFxuICAgIFwiYnJcIixcbiAgICBcImNvbFwiLFxuICAgIFwiY29tbWFuZFwiLFxuICAgIFwiZW1iZWRcIixcbiAgICBcImZyYW1lXCIsXG4gICAgXCJoclwiLFxuICAgIFwiaW1nXCIsXG4gICAgXCJpbnB1dFwiLFxuICAgIFwiaXNpbmRleFwiLFxuICAgIFwia2V5Z2VuXCIsXG4gICAgXCJsaW5rXCIsXG4gICAgXCJtZXRhXCIsXG4gICAgXCJwYXJhbVwiLFxuICAgIFwic291cmNlXCIsXG4gICAgXCJ0cmFja1wiLFxuICAgIFwid2JyXCIsXG5dKTtcbnZhciBmb3JlaWduQ29udGV4dEVsZW1lbnRzID0gbmV3IFNldChbXCJtYXRoXCIsIFwic3ZnXCJdKTtcbnZhciBodG1sSW50ZWdyYXRpb25FbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwibWlcIixcbiAgICBcIm1vXCIsXG4gICAgXCJtblwiLFxuICAgIFwibXNcIixcbiAgICBcIm10ZXh0XCIsXG4gICAgXCJhbm5vdGF0aW9uLXhtbFwiLFxuICAgIFwiZm9yZWlnbm9iamVjdFwiLFxuICAgIFwiZGVzY1wiLFxuICAgIFwidGl0bGVcIixcbl0pO1xudmFyIHJlTmFtZUVuZCA9IC9cXHN8XFwvLztcbnZhciBQYXJzZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFyc2VyKGNicywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAvKiogVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBsYXN0IGV2ZW50LiAqL1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSAwO1xuICAgICAgICAvKiogVGhlIGVuZCBpbmRleCBvZiB0aGUgbGFzdCBldmVudC4gKi9cbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZSB0aGUgc3RhcnQgaW5kZXggb2YgdGhlIGN1cnJlbnQgb3BlbiB0YWcsXG4gICAgICAgICAqIHNvIHdlIGNhbiB1cGRhdGUgdGhlIHN0YXJ0IGluZGV4IGZvciBhdHRyaWJ1dGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcGVuVGFnU3RhcnQgPSAwO1xuICAgICAgICB0aGlzLnRhZ25hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0ID0gW107XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgIC8qKiBUaGUgaW5kZXggb2YgdGhlIGxhc3Qgd3JpdHRlbiBidWZmZXIuIFVzZWQgd2hlbiByZXN1bWluZyBhZnRlciBhIGBwYXVzZSgpYC4gKi9cbiAgICAgICAgdGhpcy53cml0ZUluZGV4ID0gMDtcbiAgICAgICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwYXJzZXIgaGFzIGZpbmlzaGVkIHJ1bm5pbmcgLyBgLmVuZGAgaGFzIGJlZW4gY2FsbGVkLiAqL1xuICAgICAgICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2JzID0gY2JzICE9PSBudWxsICYmIGNicyAhPT0gdm9pZCAwID8gY2JzIDoge307XG4gICAgICAgIHRoaXMubG93ZXJDYXNlVGFnTmFtZXMgPSAoX2EgPSBvcHRpb25zLmxvd2VyQ2FzZVRhZ3MpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICFvcHRpb25zLnhtbE1vZGU7XG4gICAgICAgIHRoaXMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMgPVxuICAgICAgICAgICAgKF9iID0gb3B0aW9ucy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogIW9wdGlvbnMueG1sTW9kZTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIgPSBuZXcgKChfYyA9IG9wdGlvbnMuVG9rZW5pemVyKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBUb2tlbml6ZXJfanNfMS5kZWZhdWx0KSh0aGlzLm9wdGlvbnMsIHRoaXMpO1xuICAgICAgICAoX2UgPSAoX2QgPSB0aGlzLmNicykub25wYXJzZXJpbml0KSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuY2FsbChfZCwgdGhpcyk7XG4gICAgfVxuICAgIC8vIFRva2VuaXplciBldmVudCBoYW5kbGVyc1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9udGV4dCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldFNsaWNlKHN0YXJ0LCBlbmRJbmRleCk7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleCAtIDE7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbnRleHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBkYXRhKTtcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXg7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbnRleHRlbnRpdHkgPSBmdW5jdGlvbiAoY3ApIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgLypcbiAgICAgICAgICogRW50aXRpZXMgY2FuIGJlIGVtaXR0ZWQgb24gdGhlIGNoYXJhY3Rlciwgb3IgZGlyZWN0bHkgYWZ0ZXIuXG4gICAgICAgICAqIFdlIHVzZSB0aGUgc2VjdGlvbiBzdGFydCBoZXJlIHRvIGdldCBhY2N1cmF0ZSBpbmRpY2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy50b2tlbml6ZXIuZ2V0U2VjdGlvblN0YXJ0KCk7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBpbmRleCAtIDE7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbnRleHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCAoMCwgZGVjb2RlX2pzXzEuZnJvbUNvZGVQb2ludCkoY3ApKTtcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gaW5kZXg7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLmlzVm9pZEVsZW1lbnQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gIXRoaXMub3B0aW9ucy54bWxNb2RlICYmIHZvaWRFbGVtZW50cy5oYXMobmFtZSk7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbm9wZW50YWduYW1lID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXRPcGVuVGFnKG5hbWUpO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5lbWl0T3BlblRhZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdGhpcy5vcGVuVGFnU3RhcnQgPSB0aGlzLnN0YXJ0SW5kZXg7XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IG5hbWU7XG4gICAgICAgIHZhciBpbXBsaWVzQ2xvc2UgPSAhdGhpcy5vcHRpb25zLnhtbE1vZGUgJiYgb3BlbkltcGxpZXNDbG9zZS5nZXQobmFtZSk7XG4gICAgICAgIGlmIChpbXBsaWVzQ2xvc2UpIHtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBpbXBsaWVzQ2xvc2UuaGFzKHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY2xvc2V0YWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNWb2lkRWxlbWVudChuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgaWYgKGZvcmVpZ25Db250ZXh0RWxlbWVudHMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dC5wdXNoKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaHRtbEludGVncmF0aW9uRWxlbWVudHMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dC5wdXNoKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub25vcGVudGFnbmFtZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIG5hbWUpO1xuICAgICAgICBpZiAodGhpcy5jYnMub25vcGVudGFnKVxuICAgICAgICAgICAgdGhpcy5hdHRyaWJzID0ge307XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLmVuZE9wZW5UYWcgPSBmdW5jdGlvbiAoaXNJbXBsaWVkKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IHRoaXMub3BlblRhZ1N0YXJ0O1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJzKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25vcGVudGFnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy50YWduYW1lLCB0aGlzLmF0dHJpYnMsIGlzSW1wbGllZCk7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNicy5vbmNsb3NldGFnICYmIHRoaXMuaXNWb2lkRWxlbWVudCh0aGlzLnRhZ25hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMudGFnbmFtZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YWduYW1lID0gXCJcIjtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9ub3BlbnRhZ2VuZCA9IGZ1bmN0aW9uIChlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIHRoaXMuZW5kT3BlblRhZyhmYWxzZSk7XG4gICAgICAgIC8vIFNldCBgc3RhcnRJbmRleGAgZm9yIG5leHQgbm9kZVxuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBlbmRJbmRleCArIDE7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmNsb3NldGFnID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcmVpZ25Db250ZXh0RWxlbWVudHMuaGFzKG5hbWUpIHx8XG4gICAgICAgICAgICBodG1sSW50ZWdyYXRpb25FbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzVm9pZEVsZW1lbnQobmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLnN0YWNrLmxhc3RJbmRleE9mKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYnMub25jbG9zZXRhZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSB0aGlzLnN0YWNrLmxlbmd0aCAtIHBvcztcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNvdW50LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhlIHN0YWNrIGhhcyBzdWZmaWNpZW50IGVsZW1lbnRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYnMub25jbG9zZXRhZyh0aGlzLnN0YWNrLnBvcCgpLCBjb3VudCAhPT0gMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMueG1sTW9kZSAmJiBuYW1lID09PSBcInBcIikge1xuICAgICAgICAgICAgICAgIC8vIEltcGxpY2l0IG9wZW4gYmVmb3JlIGNsb3NlXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0T3BlblRhZyhcInBcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMub3B0aW9ucy54bWxNb2RlICYmIG5hbWUgPT09IFwiYnJcIikge1xuICAgICAgICAgICAgLy8gV2UgY2FuJ3QgdXNlIGBlbWl0T3BlblRhZ2AgZm9yIGltcGxpY2l0IG9wZW4sIGFzIGBicmAgd291bGQgYmUgaW1wbGljaXRseSBjbG9zZWQuXG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25vcGVudGFnbmFtZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIFwiYnJcIik7XG4gICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub25vcGVudGFnKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgXCJiclwiLCB7fSwgdHJ1ZSk7XG4gICAgICAgICAgICAoX2YgPSAoX2UgPSB0aGlzLmNicykub25jbG9zZXRhZykgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmNhbGwoX2UsIFwiYnJcIiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBgc3RhcnRJbmRleGAgZm9yIG5leHQgbm9kZVxuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBlbmRJbmRleCArIDE7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbnNlbGZjbG9zaW5ndGFnID0gZnVuY3Rpb24gKGVuZEluZGV4KSB7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy54bWxNb2RlIHx8XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucmVjb2duaXplU2VsZkNsb3NpbmcgfHxcbiAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHRbdGhpcy5mb3JlaWduQ29udGV4dC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcoZmFsc2UpO1xuICAgICAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBlbmRJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdGhlIGZhY3QgdGhhdCB0aGUgdGFnIGlzIHNlbGYtY2xvc2luZy5cbiAgICAgICAgICAgIHRoaXMub25vcGVudGFnZW5kKGVuZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5jbG9zZUN1cnJlbnRUYWcgPSBmdW5jdGlvbiAoaXNPcGVuSW1wbGllZCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMudGFnbmFtZTtcbiAgICAgICAgdGhpcy5lbmRPcGVuVGFnKGlzT3BlbkltcGxpZWQpO1xuICAgICAgICAvLyBTZWxmLWNsb3NpbmcgdGFncyB3aWxsIGJlIG9uIHRoZSB0b3Agb2YgdGhlIHN0YWNrXG4gICAgICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0gPT09IG5hbWUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBvcGVuaW5nIHRhZyBpc24ndCBpbXBsaWVkLCB0aGUgY2xvc2luZyB0YWcgaGFzIHRvIGJlIGltcGxpZWQuXG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jbG9zZXRhZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG5hbWUsICFpc09wZW5JbXBsaWVkKTtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9uYXR0cmlibmFtZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gc3RhcnQ7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSB0aGlzLmxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzXG4gICAgICAgICAgICA/IG5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgOiBuYW1lO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25hdHRyaWJkYXRhID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlICs9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9uYXR0cmliZW50aXR5ID0gZnVuY3Rpb24gKGNwKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidmFsdWUgKz0gKDAsIGRlY29kZV9qc18xLmZyb21Db2RlUG9pbnQpKGNwKTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9uYXR0cmliZW5kID0gZnVuY3Rpb24gKHF1b3RlLCBlbmRJbmRleCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmF0dHJpYnV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHRoaXMuYXR0cmlibmFtZSwgdGhpcy5hdHRyaWJ2YWx1ZSwgcXVvdGUgPT09IFRva2VuaXplcl9qc18xLlF1b3RlVHlwZS5Eb3VibGVcbiAgICAgICAgICAgID8gJ1wiJ1xuICAgICAgICAgICAgOiBxdW90ZSA9PT0gVG9rZW5pemVyX2pzXzEuUXVvdGVUeXBlLlNpbmdsZVxuICAgICAgICAgICAgICAgID8gXCInXCJcbiAgICAgICAgICAgICAgICA6IHF1b3RlID09PSBUb2tlbml6ZXJfanNfMS5RdW90ZVR5cGUuTm9WYWx1ZVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IG51bGwpO1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJzICYmXG4gICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYXR0cmlicywgdGhpcy5hdHRyaWJuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJzW3RoaXMuYXR0cmlibmFtZV0gPSB0aGlzLmF0dHJpYnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0cmlidmFsdWUgPSBcIlwiO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5nZXRJbnN0cnVjdGlvbk5hbWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdmFsdWUuc2VhcmNoKHJlTmFtZUVuZCk7XG4gICAgICAgIHZhciBuYW1lID0gaW5kZXggPCAwID8gdmFsdWUgOiB2YWx1ZS5zdWJzdHIoMCwgaW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9uZGVjbGFyYXRpb24gPSBmdW5jdGlvbiAoc3RhcnQsIGVuZEluZGV4KSB7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy5nZXRJbnN0cnVjdGlvbk5hbWUodmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24oXCIhXCIuY29uY2F0KG5hbWUpLCBcIiFcIi5jb25jYXQodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbiAoc3RhcnQsIGVuZEluZGV4KSB7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy5nZXRJbnN0cnVjdGlvbk5hbWUodmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24oXCI/XCIuY29uY2F0KG5hbWUpLCBcIj9cIi5jb25jYXQodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25jb21tZW50ID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmRJbmRleCwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jb21tZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXggLSBvZmZzZXQpKTtcbiAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9uY29tbWVudGVuZCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpO1xuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25jZGF0YSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgsIG9mZnNldCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2s7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXggLSBvZmZzZXQpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnhtbE1vZGUgfHwgdGhpcy5vcHRpb25zLnJlY29nbml6ZUNEQVRBKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jZGF0YXN0YXJ0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdmFsdWUpO1xuICAgICAgICAgICAgKF9mID0gKF9lID0gdGhpcy5jYnMpLm9uY2RhdGFlbmQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKF9lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIChfaCA9IChfZyA9IHRoaXMuY2JzKS5vbmNvbW1lbnQpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5jYWxsKF9nLCBcIltDREFUQVtcIi5jb25jYXQodmFsdWUsIFwiXV1cIikpO1xuICAgICAgICAgICAgKF9rID0gKF9qID0gdGhpcy5jYnMpLm9uY29tbWVudGVuZCkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLmNhbGwoX2opO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBgc3RhcnRJbmRleGAgZm9yIG5leHQgbm9kZVxuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSBlbmRJbmRleCArIDE7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgICAgIC8vIFNldCB0aGUgZW5kIGluZGV4IGZvciBhbGwgcmVtYWluaW5nIHRhZ3NcbiAgICAgICAgICAgIHRoaXMuZW5kSW5kZXggPSB0aGlzLnN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IHRoaXMuc3RhY2subGVuZ3RoOyBpbmRleCA+IDA7IHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy5zdGFja1stLWluZGV4XSwgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICB9XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmVuZCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBwYXJzZXIgdG8gYSBibGFuayBzdGF0ZSwgcmVhZHkgdG8gcGFyc2UgYSBuZXcgSFRNTCBkb2N1bWVudFxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9ucmVzZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy50YWduYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGFjay5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSAwO1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gMDtcbiAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9ucGFyc2VyaW5pdCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIHRoaXMpO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5idWZmZXJPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLndyaXRlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHBhcnNlciwgdGhlbiBwYXJzZXMgYSBjb21wbGV0ZSBkb2N1bWVudCBhbmRcbiAgICAgKiBwdXNoZXMgaXQgdG8gdGhlIGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSBEb2N1bWVudCB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ29tcGxldGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZW5kKGRhdGEpO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5nZXRTbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHdoaWxlIChzdGFydCAtIHRoaXMuYnVmZmVyT2Zmc2V0ID49IHRoaXMuYnVmZmVyc1swXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2hpZnRCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2xpY2UgPSB0aGlzLmJ1ZmZlcnNbMF0uc2xpY2Uoc3RhcnQgLSB0aGlzLmJ1ZmZlck9mZnNldCwgZW5kIC0gdGhpcy5idWZmZXJPZmZzZXQpO1xuICAgICAgICB3aGlsZSAoZW5kIC0gdGhpcy5idWZmZXJPZmZzZXQgPiB0aGlzLmJ1ZmZlcnNbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNoaWZ0QnVmZmVyKCk7XG4gICAgICAgICAgICBzbGljZSArPSB0aGlzLmJ1ZmZlcnNbMF0uc2xpY2UoMCwgZW5kIC0gdGhpcy5idWZmZXJPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzbGljZTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuc2hpZnRCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHRoaXMuYnVmZmVyc1swXS5sZW5ndGg7XG4gICAgICAgIHRoaXMud3JpdGVJbmRleC0tO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMuc2hpZnQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGNodW5rIG9mIGRhdGEgYW5kIGNhbGxzIHRoZSBjb3JyZXNwb25kaW5nIGNhbGxiYWNrcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaHVuayBDaHVuayB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG5ldyBFcnJvcihcIi53cml0ZSgpIGFmdGVyIGRvbmUhXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChjaHVuayk7XG4gICAgICAgIGlmICh0aGlzLnRva2VuaXplci5ydW5uaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuaXplci53cml0ZShjaHVuayk7XG4gICAgICAgICAgICB0aGlzLndyaXRlSW5kZXgrKztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBhbmQgY2xlYXJzIHRoZSBzdGFjaywgY2FsbHMgb25lbmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgT3B0aW9uYWwgZmluYWwgY2h1bmsgdG8gcGFyc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpIHtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgbmV3IEVycm9yKFwiLmVuZCgpIGFmdGVyIGRvbmUhXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2h1bmspXG4gICAgICAgICAgICB0aGlzLndyaXRlKGNodW5rKTtcbiAgICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLmVuZCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGF1c2VzIHBhcnNpbmcuIFRoZSBwYXJzZXIgd29uJ3QgZW1pdCBldmVudHMgdW50aWwgYHJlc3VtZWAgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLnBhdXNlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXN1bWVzIHBhcnNpbmcgYWZ0ZXIgYHBhdXNlYCB3YXMgY2FsbGVkLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplci5yZXN1bWUoKTtcbiAgICAgICAgd2hpbGUgKHRoaXMudG9rZW5pemVyLnJ1bm5pbmcgJiZcbiAgICAgICAgICAgIHRoaXMud3JpdGVJbmRleCA8IHRoaXMuYnVmZmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLndyaXRlKHRoaXMuYnVmZmVyc1t0aGlzLndyaXRlSW5kZXgrK10pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKVxuICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuZW5kKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgd3JpdGVgLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgQ2h1bmsgdG8gcGFyc2UuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgZW5kYCwgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIE9wdGlvbmFsIGZpbmFsIGNodW5rIHRvIHBhcnNlLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5kb25lID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHRoaXMuZW5kKGNodW5rKTtcbiAgICB9O1xuICAgIHJldHVybiBQYXJzZXI7XG59KCkpO1xuZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJ2YWx1ZSIsIl9faW1wb3J0U3RhciIsIm1vZCIsInJlc3VsdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImV4cG9ydHMiLCJQYXJzZXIiLCJUb2tlbml6ZXJfanNfMSIsInJlcXVpcmUiLCJkZWNvZGVfanNfMSIsImZvcm1UYWdzIiwiU2V0IiwicFRhZyIsInRhYmxlU2VjdGlvblRhZ3MiLCJkZHRUYWdzIiwicnRwVGFncyIsIm9wZW5JbXBsaWVzQ2xvc2UiLCJNYXAiLCJ2b2lkRWxlbWVudHMiLCJmb3JlaWduQ29udGV4dEVsZW1lbnRzIiwiaHRtbEludGVncmF0aW9uRWxlbWVudHMiLCJyZU5hbWVFbmQiLCJjYnMiLCJvcHRpb25zIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsIm9wZW5UYWdTdGFydCIsInRhZ25hbWUiLCJhdHRyaWJuYW1lIiwiYXR0cmlidmFsdWUiLCJhdHRyaWJzIiwic3RhY2siLCJmb3JlaWduQ29udGV4dCIsImJ1ZmZlcnMiLCJidWZmZXJPZmZzZXQiLCJ3cml0ZUluZGV4IiwiZW5kZWQiLCJsb3dlckNhc2VUYWdOYW1lcyIsImxvd2VyQ2FzZVRhZ3MiLCJ4bWxNb2RlIiwibG93ZXJDYXNlQXR0cmlidXRlTmFtZXMiLCJ0b2tlbml6ZXIiLCJUb2tlbml6ZXIiLCJkZWZhdWx0Iiwib25wYXJzZXJpbml0Iiwib250ZXh0Iiwic3RhcnQiLCJkYXRhIiwiZ2V0U2xpY2UiLCJvbnRleHRlbnRpdHkiLCJjcCIsImluZGV4IiwiZ2V0U2VjdGlvblN0YXJ0IiwiZnJvbUNvZGVQb2ludCIsImlzVm9pZEVsZW1lbnQiLCJuYW1lIiwiaGFzIiwib25vcGVudGFnbmFtZSIsInRvTG93ZXJDYXNlIiwiZW1pdE9wZW5UYWciLCJpbXBsaWVzQ2xvc2UiLCJsZW5ndGgiLCJlbGVtZW50IiwicG9wIiwib25jbG9zZXRhZyIsInB1c2giLCJvbm9wZW50YWciLCJlbmRPcGVuVGFnIiwiaXNJbXBsaWVkIiwib25vcGVudGFnZW5kIiwiX2YiLCJwb3MiLCJsYXN0SW5kZXhPZiIsImNvdW50IiwiY2xvc2VDdXJyZW50VGFnIiwib25zZWxmY2xvc2luZ3RhZyIsInJlY29nbml6ZVNlbGZDbG9zaW5nIiwiaXNPcGVuSW1wbGllZCIsIm9uYXR0cmlibmFtZSIsIm9uYXR0cmliZGF0YSIsIm9uYXR0cmliZW50aXR5Iiwib25hdHRyaWJlbmQiLCJxdW90ZSIsIm9uYXR0cmlidXRlIiwiUXVvdGVUeXBlIiwiRG91YmxlIiwiU2luZ2xlIiwiTm9WYWx1ZSIsImdldEluc3RydWN0aW9uTmFtZSIsInNlYXJjaCIsInN1YnN0ciIsIm9uZGVjbGFyYXRpb24iLCJvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiIsImNvbmNhdCIsIm9uY29tbWVudCIsIm9mZnNldCIsIm9uY29tbWVudGVuZCIsIm9uY2RhdGEiLCJfZyIsIl9oIiwiX2oiLCJfayIsInJlY29nbml6ZUNEQVRBIiwib25jZGF0YXN0YXJ0Iiwib25jZGF0YWVuZCIsIm9uZW5kIiwicmVzZXQiLCJvbnJlc2V0IiwicGFyc2VDb21wbGV0ZSIsImVuZCIsInNoaWZ0QnVmZmVyIiwic2xpY2UiLCJzaGlmdCIsIndyaXRlIiwiY2h1bmsiLCJvbmVycm9yIiwiRXJyb3IiLCJydW5uaW5nIiwicGF1c2UiLCJyZXN1bWUiLCJwYXJzZUNodW5rIiwiZG9uZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/htmlparser2/lib/Parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/htmlparser2/lib/Tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Tokenizer.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QuoteType = void 0;\nvar decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(rsc)/./node_modules/entities/lib/decode.js\");\nvar CharCodes;\n(function(CharCodes) {\n    CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n    CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n    CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n    CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n    CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n    CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n    CharCodes[CharCodes[\"Number\"] = 35] = \"Number\";\n    CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n    CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n    CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n    CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n    CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n    CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n    CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n    CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n    CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n    CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n    CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n    CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n    CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n    CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n    CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n    CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */ var State;\n(function(State) {\n    State[State[\"Text\"] = 1] = \"Text\";\n    State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n    State[State[\"InTagName\"] = 3] = \"InTagName\";\n    State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n    State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n    State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n    State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\";\n    // Attributes\n    State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n    State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n    State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n    State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n    State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n    State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n    State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\";\n    // Declarations\n    State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n    State[State[\"InDeclaration\"] = 16] = \"InDeclaration\";\n    // Processing instructions\n    State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\";\n    // Comments & CDATA\n    State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n    State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n    State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n    State[State[\"InCommentLike\"] = 21] = \"InCommentLike\";\n    // Special tags\n    State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n    State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n    State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n    State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n    State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n    State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n    State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n    State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\nfunction isWhitespace(c) {\n    return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\nfunction isEndOfTagSection(c) {\n    return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\nfunction isASCIIAlpha(c) {\n    return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\nfunction isHexDigit(c) {\n    return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\nvar QuoteType;\n(function(QuoteType) {\n    QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n    QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n    QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n    QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType = exports.QuoteType || (exports.QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */ var Sequences = {\n    Cdata: new Uint8Array([\n        0x43,\n        0x44,\n        0x41,\n        0x54,\n        0x41,\n        0x5b\n    ]),\n    CdataEnd: new Uint8Array([\n        0x5d,\n        0x5d,\n        0x3e\n    ]),\n    CommentEnd: new Uint8Array([\n        0x2d,\n        0x2d,\n        0x3e\n    ]),\n    ScriptEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x63,\n        0x72,\n        0x69,\n        0x70,\n        0x74\n    ]),\n    StyleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x74,\n        0x79,\n        0x6c,\n        0x65\n    ]),\n    TitleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x74,\n        0x69,\n        0x74,\n        0x6c,\n        0x65\n    ])\n};\nvar Tokenizer = /** @class */ function() {\n    function Tokenizer(_a, cbs) {\n        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */ this.state = State.Text;\n        /** The read buffer. */ this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */ this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */ this.index = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */ this.baseState = State.Text;\n        /** For special parsing behavior inside of script and style tags. */ this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */ this.running = true;\n        /** The offset of the current buffer. */ this.offset = 0;\n        this.currentSequence = undefined;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        /** For named entities, the index of the value. For numeric entities, the code point. */ this.entityResult = 0;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;\n    }\n    Tokenizer.prototype.reset = function() {\n        this.state = State.Text;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this.index = 0;\n        this.baseState = State.Text;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.offset = 0;\n    };\n    Tokenizer.prototype.write = function(chunk) {\n        this.offset += this.buffer.length;\n        this.buffer = chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function() {\n        if (this.running) this.finish();\n    };\n    Tokenizer.prototype.pause = function() {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function() {\n        this.running = true;\n        if (this.index < this.buffer.length + this.offset) {\n            this.parse();\n        }\n    };\n    /**\n     * The current index within all of the written data.\n     */ Tokenizer.prototype.getIndex = function() {\n        return this.index;\n    };\n    /**\n     * The start of the current section.\n     */ Tokenizer.prototype.getSectionStart = function() {\n        return this.sectionStart;\n    };\n    Tokenizer.prototype.stateText = function(c) {\n        if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n            if (this.index > this.sectionStart) {\n                this.cbs.ontext(this.sectionStart, this.index);\n            }\n            this.state = State.BeforeTagName;\n            this.sectionStart = this.index;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateSpecialStartSequence = function(c) {\n        var isEnd = this.sequenceIndex === this.currentSequence.length;\n        var isMatch = isEnd ? isEndOfTagSection(c) : (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        } else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this.state = State.InTagName;\n        this.stateInTagName(c);\n    };\n    /** Look for an end tag. For <title> tags, also decode entities. */ Tokenizer.prototype.stateInSpecialTag = function(c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === CharCodes.Gt || isWhitespace(c)) {\n                var endOfText = this.index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    var actualIndex = this.index;\n                    this.index = endOfText;\n                    this.cbs.ontext(this.sectionStart, endOfText);\n                    this.index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        } else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === CharCodes.Amp) {\n                    this.state = State.BeforeEntity;\n                }\n            } else if (this.fastForwardTo(CharCodes.Lt)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        } else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === CharCodes.Lt);\n        }\n    };\n    Tokenizer.prototype.stateCDATASequence = function(c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this.state = State.InCommentLike;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n            }\n        } else {\n            this.sequenceIndex = 0;\n            this.state = State.InDeclaration;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    };\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */ Tokenizer.prototype.fastForwardTo = function(c) {\n        while(++this.index < this.buffer.length + this.offset){\n            if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */ this.index = this.buffer.length + this.offset - 1;\n        return false;\n    };\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */ Tokenizer.prototype.stateInCommentLike = function(c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(this.sectionStart, this.index, 2);\n                } else {\n                    this.cbs.oncomment(this.sectionStart, this.index, 2);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n                this.state = State.Text;\n            }\n        } else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */ Tokenizer.prototype.isTagStartChar = function(c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    };\n    Tokenizer.prototype.startSpecial = function(sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this.state = State.SpecialStartSequence;\n    };\n    Tokenizer.prototype.stateBeforeTagName = function(c) {\n        if (c === CharCodes.ExclamationMark) {\n            this.state = State.BeforeDeclaration;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Questionmark) {\n            this.state = State.InProcessingInstruction;\n            this.sectionStart = this.index + 1;\n        } else if (this.isTagStartChar(c)) {\n            var lower = c | 0x20;\n            this.sectionStart = this.index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            } else {\n                this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n            }\n        } else if (c === CharCodes.Slash) {\n            this.state = State.BeforeClosingTagName;\n        } else {\n            this.state = State.Text;\n            this.stateText(c);\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function(c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function(c) {\n        if (isWhitespace(c)) {\n        // Ignore\n        } else if (c === CharCodes.Gt) {\n            this.state = State.Text;\n        } else {\n            this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function(c) {\n        if (c === CharCodes.Gt || isWhitespace(c)) {\n            this.cbs.onclosetag(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterClosingTagName;\n            this.stateAfterClosingTagName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function(c) {\n        // Skip everything until \">\"\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onopentagend(this.index);\n            if (this.isSpecial) {\n                this.state = State.InSpecialTag;\n                this.sequenceIndex = 0;\n            } else {\n                this.state = State.Text;\n            }\n            this.baseState = this.state;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Slash) {\n            this.state = State.InSelfClosingTag;\n        } else if (!isWhitespace(c)) {\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onselfclosingtag(this.index);\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        } else if (!isWhitespace(c)) {\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function(c) {\n        if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterAttributeName;\n            this.stateAfterAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function(c) {\n        if (c === CharCodes.Eq) {\n            this.state = State.BeforeAttributeValue;\n        } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (!isWhitespace(c)) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function(c) {\n        if (c === CharCodes.DoubleQuote) {\n            this.state = State.InAttributeValueDq;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.SingleQuote) {\n            this.state = State.InAttributeValueSq;\n            this.sectionStart = this.index + 1;\n        } else if (!isWhitespace(c)) {\n            this.sectionStart = this.index;\n            this.state = State.InAttributeValueNq;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function(c, quote) {\n        if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n            this.state = State.BeforeAttributeName;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function(c) {\n        this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function(c) {\n        this.handleInAttributeValue(c, CharCodes.SingleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function(c) {\n        if (isWhitespace(c) || c === CharCodes.Gt) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(QuoteType.Unquoted, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function(c) {\n        if (c === CharCodes.OpeningSquareBracket) {\n            this.state = State.CDATASequence;\n            this.sequenceIndex = 0;\n        } else {\n            this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInDeclaration = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.ondeclaration(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function(c) {\n        if (c === CharCodes.Dash) {\n            this.state = State.InCommentLike;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this.index + 1;\n        } else {\n            this.state = State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInSpecialComment = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.oncomment(this.sectionStart, this.index, 0);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function(c) {\n        var lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        } else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        } else {\n            this.state = State.InTagName;\n            this.stateInTagName(c); // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeEntity = function(c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        this.entityResult = 0;\n        if (c === CharCodes.Number) {\n            this.state = State.BeforeNumericEntity;\n        } else if (c === CharCodes.Amp) {\n        // We have two `&` characters in a row. Stay in the current state.\n        } else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.state = State.InNamedEntity;\n            this.stateInNamedEntity(c);\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function(c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this.index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n            // The mask is the number of bytes of the value, including the current byte.\n            var valueLength = (masked >> 14) - 1;\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n                this.trieIndex += valueLength;\n            } else {\n                // Add 1 as we have already incremented the excess\n                var entityStart = this.index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.sectionStart, entityStart);\n                }\n                // If this is a surrogate pair, consume the next two bytes\n                this.entityResult = this.trieIndex;\n                this.trieIndex += valueLength;\n                this.entityExcess = 0;\n                this.sectionStart = this.index + 1;\n                if (valueLength === 0) {\n                    this.emitNamedEntity();\n                }\n            }\n        }\n    };\n    Tokenizer.prototype.emitNamedEntity = function() {\n        this.state = this.baseState;\n        if (this.entityResult === 0) {\n            return;\n        }\n        var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >> 14;\n        switch(valueLength){\n            case 1:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH);\n                    break;\n                }\n            case 2:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                    break;\n                }\n            case 3:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n                }\n        }\n    };\n    Tokenizer.prototype.stateBeforeNumericEntity = function(c) {\n        if ((c | 0x20) === CharCodes.LowerX) {\n            this.entityExcess++;\n            this.state = State.InHexEntity;\n        } else {\n            this.state = State.InNumericEntity;\n            this.stateInNumericEntity(c);\n        }\n    };\n    Tokenizer.prototype.emitNumericEntity = function(strict) {\n        var entityStart = this.index - this.entityExcess - 1;\n        var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n        if (numberStart !== this.index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.sectionStart, entityStart);\n            }\n            this.sectionStart = this.index + Number(strict);\n            this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));\n        }\n        this.state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else if (isHexDigit(c)) {\n            this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.allowLegacyEntity = function() {\n        return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n    };\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */ Tokenizer.prototype.cleanup = function() {\n        // If we are inside of text or attributes, emit what we already have.\n        if (this.running && this.sectionStart !== this.index) {\n            if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n                this.cbs.ontext(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n                this.cbs.onattribdata(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            }\n        }\n    };\n    Tokenizer.prototype.shouldContinue = function() {\n        return this.index < this.buffer.length + this.offset && this.running;\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */ Tokenizer.prototype.parse = function() {\n        while(this.shouldContinue()){\n            var c = this.buffer.charCodeAt(this.index - this.offset);\n            switch(this.state){\n                case State.Text:\n                    {\n                        this.stateText(c);\n                        break;\n                    }\n                case State.SpecialStartSequence:\n                    {\n                        this.stateSpecialStartSequence(c);\n                        break;\n                    }\n                case State.InSpecialTag:\n                    {\n                        this.stateInSpecialTag(c);\n                        break;\n                    }\n                case State.CDATASequence:\n                    {\n                        this.stateCDATASequence(c);\n                        break;\n                    }\n                case State.InAttributeValueDq:\n                    {\n                        this.stateInAttributeValueDoubleQuotes(c);\n                        break;\n                    }\n                case State.InAttributeName:\n                    {\n                        this.stateInAttributeName(c);\n                        break;\n                    }\n                case State.InCommentLike:\n                    {\n                        this.stateInCommentLike(c);\n                        break;\n                    }\n                case State.InSpecialComment:\n                    {\n                        this.stateInSpecialComment(c);\n                        break;\n                    }\n                case State.BeforeAttributeName:\n                    {\n                        this.stateBeforeAttributeName(c);\n                        break;\n                    }\n                case State.InTagName:\n                    {\n                        this.stateInTagName(c);\n                        break;\n                    }\n                case State.InClosingTagName:\n                    {\n                        this.stateInClosingTagName(c);\n                        break;\n                    }\n                case State.BeforeTagName:\n                    {\n                        this.stateBeforeTagName(c);\n                        break;\n                    }\n                case State.AfterAttributeName:\n                    {\n                        this.stateAfterAttributeName(c);\n                        break;\n                    }\n                case State.InAttributeValueSq:\n                    {\n                        this.stateInAttributeValueSingleQuotes(c);\n                        break;\n                    }\n                case State.BeforeAttributeValue:\n                    {\n                        this.stateBeforeAttributeValue(c);\n                        break;\n                    }\n                case State.BeforeClosingTagName:\n                    {\n                        this.stateBeforeClosingTagName(c);\n                        break;\n                    }\n                case State.AfterClosingTagName:\n                    {\n                        this.stateAfterClosingTagName(c);\n                        break;\n                    }\n                case State.BeforeSpecialS:\n                    {\n                        this.stateBeforeSpecialS(c);\n                        break;\n                    }\n                case State.InAttributeValueNq:\n                    {\n                        this.stateInAttributeValueNoQuotes(c);\n                        break;\n                    }\n                case State.InSelfClosingTag:\n                    {\n                        this.stateInSelfClosingTag(c);\n                        break;\n                    }\n                case State.InDeclaration:\n                    {\n                        this.stateInDeclaration(c);\n                        break;\n                    }\n                case State.BeforeDeclaration:\n                    {\n                        this.stateBeforeDeclaration(c);\n                        break;\n                    }\n                case State.BeforeComment:\n                    {\n                        this.stateBeforeComment(c);\n                        break;\n                    }\n                case State.InProcessingInstruction:\n                    {\n                        this.stateInProcessingInstruction(c);\n                        break;\n                    }\n                case State.InNamedEntity:\n                    {\n                        this.stateInNamedEntity(c);\n                        break;\n                    }\n                case State.BeforeEntity:\n                    {\n                        this.stateBeforeEntity(c);\n                        break;\n                    }\n                case State.InHexEntity:\n                    {\n                        this.stateInHexEntity(c);\n                        break;\n                    }\n                case State.InNumericEntity:\n                    {\n                        this.stateInNumericEntity(c);\n                        break;\n                    }\n                default:\n                    {\n                        // `this._state === State.BeforeNumericEntity`\n                        this.stateBeforeNumericEntity(c);\n                    }\n            }\n            this.index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function() {\n        if (this.state === State.InNamedEntity) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this.index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    /** Handle any trailing data. */ Tokenizer.prototype.handleTrailingData = function() {\n        var endIndex = this.buffer.length + this.offset;\n        if (this.state === State.InCommentLike) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(this.sectionStart, endIndex, 0);\n            } else {\n                this.cbs.oncomment(this.sectionStart, endIndex, 0);\n            }\n        } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n        /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */ } else {\n            this.cbs.ontext(this.sectionStart, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitPartial = function(start, endIndex) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribdata(start, endIndex);\n        } else {\n            this.cbs.ontext(start, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitCodePoint = function(cp) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribentity(cp);\n        } else {\n            this.cbs.ontextentity(cp);\n        }\n    };\n    return Tokenizer;\n}();\nexports[\"default\"] = Tokenizer; //# sourceMappingURL=Tokenizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/htmlparser2/lib/Tokenizer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/htmlparser2/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/htmlparser2/lib/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;\nvar Parser_js_1 = __webpack_require__(/*! ./Parser.js */ \"(rsc)/./node_modules/htmlparser2/lib/Parser.js\");\nvar Parser_js_2 = __webpack_require__(/*! ./Parser.js */ \"(rsc)/./node_modules/htmlparser2/lib/Parser.js\");\nObject.defineProperty(exports, \"Parser\", ({\n    enumerable: true,\n    get: function() {\n        return Parser_js_2.Parser;\n    }\n}));\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\nvar domhandler_2 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"DomHandler\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_2.DomHandler;\n    }\n}));\n// Old name for DomHandler\nObject.defineProperty(exports, \"DefaultHandler\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_2.DomHandler;\n    }\n}));\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */ function parseDocument(data, options) {\n    var handler = new domhandler_1.DomHandler(undefined, options);\n    new Parser_js_1.Parser(handler, options).end(data);\n    return handler.root;\n}\nexports.parseDocument = parseDocument;\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */ function parseDOM(data, options) {\n    return parseDocument(data, options).children;\n}\nexports.parseDOM = parseDOM;\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */ function createDomStream(callback, options, elementCallback) {\n    var handler = new domhandler_1.DomHandler(callback, options, elementCallback);\n    return new Parser_js_1.Parser(handler, options);\n}\nexports.createDomStream = createDomStream;\nvar Tokenizer_js_1 = __webpack_require__(/*! ./Tokenizer.js */ \"(rsc)/./node_modules/htmlparser2/lib/Tokenizer.js\");\nObject.defineProperty(exports, \"Tokenizer\", ({\n    enumerable: true,\n    get: function() {\n        return __importDefault(Tokenizer_js_1).default;\n    }\n}));\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */ exports.ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/index.js\"));\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(rsc)/./node_modules/domutils/lib/index.js\");\nvar domutils_2 = __webpack_require__(/*! domutils */ \"(rsc)/./node_modules/domutils/lib/index.js\");\nObject.defineProperty(exports, \"getFeed\", ({\n    enumerable: true,\n    get: function() {\n        return domutils_2.getFeed;\n    }\n}));\nvar parseFeedDefaultOptions = {\n    xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */ function parseFeed(feed, options) {\n    if (options === void 0) {\n        options = parseFeedDefaultOptions;\n    }\n    return (0, domutils_1.getFeed)(parseDOM(feed, options));\n}\nexports.parseFeed = parseFeed;\nexports.DomUtils = __importStar(__webpack_require__(/*! domutils */ \"(rsc)/./node_modules/domutils/lib/index.js\")); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/htmlparser2/lib/index.js\n");

/***/ })

};
;